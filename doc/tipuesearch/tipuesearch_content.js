var tipuesearch = {"pages":[{"title":" ForClust ","text":"ForClust Developer Info Seyed Ali Ghasemi","tags":"home","loc":"index.html"},{"title":"linux_backlight – ForClust ","text":"type, private :: linux_backlight Inherited by type~~linux_backlight~~InheritedByGraph type~linux_backlight linux_backlight type~cluster cluster type~cluster->type~linux_backlight backlight Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables debug path_backlight actual_brightness brightness max_brightness Type-Bound Procedures set_debug select get_actual_brightness get_max_brightness set_brightness deselect Source Code linux_backlight Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: debug character(len=:), public, allocatable :: path_backlight integer, public :: actual_brightness integer, public :: brightness integer, public :: max_brightness Type-Bound Procedures procedure, public :: set_debug => set_backlight_debug_switch private pure elemental subroutine set_backlight_debug_switch (this, debug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this character(len=*), intent(in) :: debug procedure, public :: select => select_backlight private impure elemental subroutine select_backlight (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this procedure, public :: get_actual_brightness => get_backlight_actual_brightness private impure elemental subroutine get_backlight_actual_brightness (this, actual_brightness) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(out), optional :: actual_brightness procedure, public :: get_max_brightness => get_backlight_max_brightness private impure elemental subroutine get_backlight_max_brightness (this, max_brightness) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(out), optional :: max_brightness procedure, public :: set_brightness => set_backlight_brightness private impure elemental subroutine set_backlight_brightness (this, brightness) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(in) :: brightness procedure, public :: deselect => deallocate_linux_backlight private pure elemental subroutine deallocate_linux_backlight (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this Source Code type :: linux_backlight character ( len = :), allocatable :: debug character ( len = :), allocatable :: path_backlight integer :: actual_brightness integer :: brightness integer :: max_brightness contains procedure :: set_debug => set_backlight_debug_switch procedure :: select => select_backlight procedure :: get_actual_brightness => get_backlight_actual_brightness procedure :: get_max_brightness => get_backlight_max_brightness procedure :: set_brightness => set_backlight_brightness procedure :: deselect => deallocate_linux_backlight end type linux_backlight","tags":"","loc":"type/linux_backlight.html"},{"title":"linux_cpu – ForClust ","text":"type, private :: linux_cpu Inherited by type~~linux_cpu~~InheritedByGraph type~linux_cpu linux_cpu type~linux_nodes linux_nodes type~linux_nodes->type~linux_cpu cpu type~cluster cluster type~cluster->type~linux_nodes node Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables debug path_cpu online base_frequency cpuinfo_max_freq cpuinfo_min_freq scaling_cur_freq scaling_max_freq scaling_min_freq scaling_governor energy_performance_preference Type-Bound Procedures set_debug is_online get_base_freq get_cpuinfo_max_freq get_cpuinfo_min_freq get_scaling_cur_freq get_scaling_max_freq get_scaling_min_freq get_scaling_governor get_energy_performance set_offline set_online set_scaling_max_freq set_scaling_min_freq set_scaling_governor set_energy_performance deselect Source Code linux_cpu Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: debug character(len=:), public, allocatable :: path_cpu integer, public :: online integer, public :: base_frequency integer, public :: cpuinfo_max_freq integer, public :: cpuinfo_min_freq integer, public :: scaling_cur_freq integer, public :: scaling_max_freq integer, public :: scaling_min_freq character(len=:), public, allocatable :: scaling_governor character(len=:), public, allocatable :: energy_performance_preference Type-Bound Procedures procedure, public :: set_debug => set_cpu_debug_switch private pure elemental subroutine set_cpu_debug_switch (this, debug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: debug procedure, public :: is_online => is_cpu_online private impure elemental subroutine is_cpu_online (this, online) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: online procedure, public :: get_base_freq => get_cpu_base_frequency private impure elemental subroutine get_cpu_base_frequency (this, base_frequency) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: base_frequency procedure, public :: get_cpuinfo_max_freq => get_cpuinfo_max_frequency private impure elemental subroutine get_cpuinfo_max_frequency (this, cpuinfo_max_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: cpuinfo_max_freq procedure, public :: get_cpuinfo_min_freq => get_cpuinfo_min_frequency private impure elemental subroutine get_cpuinfo_min_frequency (this, cpuinfo_min_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: cpuinfo_min_freq procedure, public :: get_scaling_cur_freq => get_cpu_scaling_cur_frequency private impure elemental subroutine get_cpu_scaling_cur_frequency (this, scaling_cur_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_cur_freq procedure, public :: get_scaling_max_freq => get_cpu_scaling_max_frequency private impure elemental subroutine get_cpu_scaling_max_frequency (this, scaling_max_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_max_freq procedure, public :: get_scaling_min_freq => get_cpu_scaling_min_frequency private impure elemental subroutine get_cpu_scaling_min_frequency (this, scaling_min_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_min_freq procedure, public :: get_scaling_governor => get_cpu_scaling_governor private impure elemental subroutine get_cpu_scaling_governor (this, scaling_governor) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(out), optional :: scaling_governor procedure, public :: get_energy_performance => get_cpu_energy_performance_preference private impure elemental subroutine get_cpu_energy_performance_preference (this, energy_performance_preference) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(out), optional :: energy_performance_preference procedure, public :: set_offline => set_cpu_offline private impure elemental subroutine set_cpu_offline (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this procedure, public :: set_online => set_cpu_online private impure elemental subroutine set_cpu_online (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this procedure, public :: set_scaling_max_freq => set_cpu_scaling_max_freq private impure elemental subroutine set_cpu_scaling_max_freq (this, max_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(in) :: max_freq procedure, public :: set_scaling_min_freq => set_cpu_scaling_min_freq private impure elemental subroutine set_cpu_scaling_min_freq (this, min_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(in) :: min_freq procedure, public :: set_scaling_governor => set_cpu_scaling_governor private impure elemental subroutine set_cpu_scaling_governor (this, scaling_governor) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: scaling_governor procedure, public :: set_energy_performance => set_cpu_energy_performance_preference private impure elemental subroutine set_cpu_energy_performance_preference (this, energy_performance_preference) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: energy_performance_preference procedure, public :: deselect => deallocate_linux_cpu private pure elemental subroutine deallocate_linux_cpu (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this Source Code type :: linux_cpu character ( len = :), allocatable :: debug character ( len = :), allocatable :: path_cpu integer :: online integer :: base_frequency integer :: cpuinfo_max_freq integer :: cpuinfo_min_freq integer :: scaling_cur_freq integer :: scaling_max_freq integer :: scaling_min_freq character ( len = :), allocatable :: scaling_governor character ( len = :), allocatable :: energy_performance_preference contains procedure :: set_debug => set_cpu_debug_switch procedure :: is_online => is_cpu_online procedure :: get_base_freq => get_cpu_base_frequency procedure :: get_cpuinfo_max_freq => get_cpuinfo_max_frequency procedure :: get_cpuinfo_min_freq => get_cpuinfo_min_frequency procedure :: get_scaling_cur_freq => get_cpu_scaling_cur_frequency procedure :: get_scaling_max_freq => get_cpu_scaling_max_frequency procedure :: get_scaling_min_freq => get_cpu_scaling_min_frequency procedure :: get_scaling_governor => get_cpu_scaling_governor procedure :: get_energy_performance => get_cpu_energy_performance_preference procedure :: set_offline => set_cpu_offline procedure :: set_online => set_cpu_online procedure :: set_scaling_max_freq => set_cpu_scaling_max_freq procedure :: set_scaling_min_freq => set_cpu_scaling_min_freq procedure :: set_scaling_governor => set_cpu_scaling_governor procedure :: set_energy_performance => set_cpu_energy_performance_preference procedure :: deselect => deallocate_linux_cpu end type linux_cpu","tags":"","loc":"type/linux_cpu.html"},{"title":"linux_nodes – ForClust ","text":"type, private :: linux_nodes Inherits type~~linux_nodes~~InheritsGraph type~linux_nodes linux_nodes type~linux_cpu linux_cpu type~linux_nodes->type~linux_cpu cpu Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Inherited by type~~linux_nodes~~InheritedByGraph type~linux_nodes linux_nodes type~cluster cluster type~cluster->type~linux_nodes node Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables debug path_node cpu ncpus turbo is_intel_pstate Type-Bound Procedures set_debug select find_number_of_cpus is_intel_pstate_available get_turbo set_turbo deselect Source Code linux_nodes Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: debug character(len=:), public, allocatable :: path_node type( linux_cpu ), public, dimension(:), allocatable :: cpu integer, public :: ncpus character(len=:), public, allocatable :: turbo integer, public :: is_intel_pstate Type-Bound Procedures procedure, public :: set_debug => set_node_debug_switch private pure elemental subroutine set_node_debug_switch (this, debug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(in) :: debug procedure, public :: select => select_node private impure elemental subroutine select_node (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this procedure, private :: find_number_of_cpus private impure elemental subroutine find_number_of_cpus (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this procedure, private :: is_intel_pstate_available private impure elemental subroutine is_intel_pstate_available (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this procedure, public :: get_turbo => get_intel_turbo private impure elemental subroutine get_intel_turbo (this, turbo) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(out), optional :: turbo procedure, public :: set_turbo => set_intel_turbo private impure elemental subroutine set_intel_turbo (this, turbo) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(in) :: turbo procedure, public :: deselect => deallocate_linux_nodes private pure elemental subroutine deallocate_linux_nodes (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this Source Code type :: linux_nodes character ( len = :), allocatable :: debug character ( len = :), allocatable :: path_node type ( linux_cpu ), dimension (:), allocatable :: cpu integer :: ncpus character ( len = :), allocatable :: turbo integer :: is_intel_pstate contains procedure :: set_debug => set_node_debug_switch procedure :: select => select_node procedure , private :: find_number_of_cpus ! todo: procedure , private :: is_intel_pstate_available procedure :: get_turbo => get_intel_turbo procedure :: set_turbo => set_intel_turbo procedure :: deselect => deallocate_linux_nodes end type linux_nodes","tags":"","loc":"type/linux_nodes.html"},{"title":"cluster – ForClust ","text":"type, public :: cluster Inherits type~~cluster~~InheritsGraph type~cluster cluster type~linux_nodes linux_nodes type~cluster->type~linux_nodes node type~linux_backlight linux_backlight type~cluster->type~linux_backlight backlight type~linux_cpu linux_cpu type~linux_nodes->type~linux_cpu cpu Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\n    extends. Dashed arrows point from a derived type to the other\n    types it contains as a components, with a label listing the name(s) of\n    said component(s). Where possible, edges connecting nodes are given different colours to make them easier to distinguish in large graphs. Contents Variables node nnodes backlight Type-Bound Procedures select find_number_of_nodes print_info deselect Source Code cluster Components Type Visibility Attributes Name Initial type( linux_nodes ), public, dimension(:), allocatable :: node integer, public :: nnodes type( linux_backlight ), public :: backlight Type-Bound Procedures procedure, public :: select => select_linux private pure elemental subroutine select_linux (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this procedure, private :: find_number_of_nodes private pure elemental subroutine find_number_of_nodes (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this procedure, public :: print_info => print_all_cluster_info private impure elemental subroutine print_all_cluster_info (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this procedure, public :: deselect => deallocate_cluster private pure elemental subroutine deallocate_cluster (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this Source Code type :: cluster type ( linux_nodes ), dimension (:), allocatable :: node integer :: nnodes type ( linux_backlight ) :: backlight contains procedure :: select => select_linux procedure , private :: find_number_of_nodes ! todo: procedure :: print_info => print_all_cluster_info procedure :: deselect => deallocate_cluster end type cluster","tags":"","loc":"type/cluster.html"},{"title":"find_number_of_nodes – ForClust","text":"private pure elemental subroutine find_number_of_nodes(this) Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this Contents Source Code find_number_of_nodes Source Code elemental pure subroutine find_number_of_nodes ( this ) class ( cluster ), intent ( inout ) :: this ! todo: get total number of linux nodes this % nnodes = 1 end subroutine find_number_of_nodes","tags":"","loc":"proc/find_number_of_nodes.html"},{"title":"select_linux – ForClust","text":"private pure elemental subroutine select_linux(this) Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this Contents Source Code select_linux Source Code elemental pure subroutine select_linux ( this ) class ( cluster ), intent ( inout ) :: this character ( len = 100 ) :: current_node_path character ( len = 100 ) :: backlight_path integer :: i call this % find_number_of_nodes () if (. not . allocated ( this % node )) allocate ( this % node ( this % nnodes )) do concurrent ( i = 1 : this % nnodes ) write ( current_node_path , \"(a,i0,a)\" ) \"/sys/devices/system/node/node\" , i - 1 , \"/\" this % node ( i )% path_node = adjustl ( trim ( current_node_path )) end do write ( backlight_path , \"(a,i0,a)\" ) \"/sys/class/backlight/intel_backlight\" this % backlight % path_backlight = adjustl ( trim ( backlight_path )) end subroutine select_linux","tags":"","loc":"proc/select_linux.html"},{"title":"find_number_of_cpus – ForClust","text":"private impure elemental subroutine find_number_of_cpus(this) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this Contents Source Code find_number_of_cpus Source Code elemental impure subroutine find_number_of_cpus ( this ) class ( linux_nodes ), intent ( inout ) :: this integer :: nunit logical :: ex character ( len = :), allocatable :: file_name ! todo: get total number of linux cpus call execute_command_line ( \"echo $(nproc --all) > /tmp/forclust_ncpus\" ) file_name = '/tmp/forclust_ncpus' inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , action = 'read' ) read ( nunit , * ) this % ncpus close ( nunit ) else this % ncpus = 1 ! error stop \"file not found: \"//file_name end if end subroutine find_number_of_cpus","tags":"","loc":"proc/find_number_of_cpus.html"},{"title":"select_node – ForClust","text":"private impure elemental subroutine select_node(this) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this Contents Source Code select_node Source Code elemental impure subroutine select_node ( this ) class ( linux_nodes ), intent ( inout ) :: this character ( len = 100 ) :: current_cpu_path integer :: nunit , stat , i integer :: temp character ( len = 100 ) :: temp_char logical :: ex character ( len = :), allocatable :: file_name ! check if intel_pstate exists call this % is_intel_pstate_available () if ( this % is_intel_pstate == 1 ) then ! read turbo open ( newunit = nunit , file = '/sys/devices/system/cpu/intel_pstate/no_turbo' , iostat = stat ) read ( nunit , * ) temp close ( nunit ) if ( temp == 1 ) this % turbo = 'off' if ( temp == 0 ) this % turbo = 'on' else this % turbo = 'off' end if call this % find_number_of_cpus () if (. not . allocated ( this % cpu )) allocate ( this % cpu ( this % ncpus )) do concurrent ( i = 1 : this % ncpus ) ! path cpu write ( current_cpu_path , \"(a,a,i0)\" ) adjustl ( trim ( this % path_node )), \"cpu\" , i - 1 this % cpu ( i )% path_cpu = adjustl ( trim ( current_cpu_path )) ! read base frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/base_frequency\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% base_frequency close ( nunit ) else this % cpu ( i )% base_frequency = 0 ! error stop \"file not found: \"//file_name endif ! read cpuinfo max frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/cpuinfo_max_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% cpuinfo_max_freq close ( nunit ) else this % cpu ( i )% cpuinfo_max_freq = 0 ! error stop \"file not found: \"//file_name endif ! read cpuinfo min frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/cpuinfo_min_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% cpuinfo_min_freq close ( nunit ) else this % cpu ( i )% cpuinfo_min_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling cur frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_cur_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% scaling_cur_freq close ( nunit ) else this % cpu ( i )% scaling_cur_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling max frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_max_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_max_freq\" , iostat = stat ) read ( nunit , * ) this % cpu ( i )% scaling_max_freq close ( nunit ) else this % cpu ( i )% scaling_max_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling min frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_min_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% scaling_min_freq close ( nunit ) else this % cpu ( i )% scaling_min_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling governor file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_governor\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) temp_char this % cpu ( i )% scaling_governor = adjustl ( trim ( temp_char )) close ( nunit ) else this % cpu ( i )% scaling_governor = \"not found\" ! error stop \"file not found: \"//file_name endif ! read energy performance preference file_name = this % cpu ( i )% path_cpu // \"/cpufreq/energy_performance_preference\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) temp_char this % cpu ( i )% energy_performance_preference = adjustl ( trim ( temp_char )) close ( nunit ) else this % cpu ( i )% energy_performance_preference = \"not found\" ! error stop \"file not found: \"//file_name endif end do ! read online this % cpu ( 1 )% online = 1 do concurrent ( i = 2 : this % ncpus ) file_name = this % cpu ( i )% path_cpu // \"/online\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = this % cpu ( i )% path_cpu // \"/online\" , iostat = stat ) read ( nunit , * ) this % cpu ( i )% online close ( nunit ) else this % cpu ( i )% online = 0 ! error stop \"file not found: \"//file_name endif end do end subroutine select_node","tags":"","loc":"proc/select_node.html"},{"title":"is_cpu_online – ForClust","text":"private impure elemental subroutine is_cpu_online(this, online) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: online Contents Source Code is_cpu_online Source Code elemental impure subroutine is_cpu_online ( this , online ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: online if ( present ( online )) online = this % online if ( this % debug == 'on' ) print '(a,i0)' , 'online:                 ' , this % online end subroutine is_cpu_online","tags":"","loc":"proc/is_cpu_online.html"},{"title":"get_cpu_base_frequency – ForClust","text":"private impure elemental subroutine get_cpu_base_frequency(this, base_frequency) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: base_frequency Contents Source Code get_cpu_base_frequency Source Code elemental impure subroutine get_cpu_base_frequency ( this , base_frequency ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: base_frequency if ( present ( base_frequency )) base_frequency = this % base_frequency if ( this % debug == 'on' ) print '(a,i0)' , 'base frequency:         ' , this % base_frequency end subroutine get_cpu_base_frequency","tags":"","loc":"proc/get_cpu_base_frequency.html"},{"title":"get_cpuinfo_max_frequency – ForClust","text":"private impure elemental subroutine get_cpuinfo_max_frequency(this, cpuinfo_max_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: cpuinfo_max_freq Contents Source Code get_cpuinfo_max_frequency Source Code elemental impure subroutine get_cpuinfo_max_frequency ( this , cpuinfo_max_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: cpuinfo_max_freq if ( present ( cpuinfo_max_freq )) cpuinfo_max_freq = this % cpuinfo_max_freq if ( this % debug == 'on' ) print '(a,i0)' , 'cpuinfo max frequency:  ' , this % cpuinfo_max_freq end subroutine get_cpuinfo_max_frequency","tags":"","loc":"proc/get_cpuinfo_max_frequency.html"},{"title":"get_cpuinfo_min_frequency – ForClust","text":"private impure elemental subroutine get_cpuinfo_min_frequency(this, cpuinfo_min_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: cpuinfo_min_freq Contents Source Code get_cpuinfo_min_frequency Source Code elemental impure subroutine get_cpuinfo_min_frequency ( this , cpuinfo_min_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: cpuinfo_min_freq if ( present ( cpuinfo_min_freq )) cpuinfo_min_freq = this % cpuinfo_min_freq if ( this % debug == 'on' ) print '(a,i0)' , 'cpuinfo min frequency:  ' , this % cpuinfo_min_freq end subroutine get_cpuinfo_min_frequency","tags":"","loc":"proc/get_cpuinfo_min_frequency.html"},{"title":"get_cpu_scaling_cur_frequency – ForClust","text":"private impure elemental subroutine get_cpu_scaling_cur_frequency(this, scaling_cur_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_cur_freq Contents Source Code get_cpu_scaling_cur_frequency Source Code elemental impure subroutine get_cpu_scaling_cur_frequency ( this , scaling_cur_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: scaling_cur_freq if ( present ( scaling_cur_freq )) scaling_cur_freq = this % scaling_cur_freq if ( this % debug == 'on' ) print '(a,i0)' , 'scaling cur frequency:  ' , this % scaling_cur_freq end subroutine get_cpu_scaling_cur_frequency","tags":"","loc":"proc/get_cpu_scaling_cur_frequency.html"},{"title":"get_cpu_scaling_max_frequency – ForClust","text":"private impure elemental subroutine get_cpu_scaling_max_frequency(this, scaling_max_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_max_freq Contents Source Code get_cpu_scaling_max_frequency Source Code elemental impure subroutine get_cpu_scaling_max_frequency ( this , scaling_max_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: scaling_max_freq if ( present ( scaling_max_freq )) scaling_max_freq = this % scaling_max_freq if ( this % debug == 'on' ) print '(a,i0)' , 'scaling max frequency:  ' , this % scaling_max_freq end subroutine get_cpu_scaling_max_frequency","tags":"","loc":"proc/get_cpu_scaling_max_frequency.html"},{"title":"get_cpu_scaling_min_frequency – ForClust","text":"private impure elemental subroutine get_cpu_scaling_min_frequency(this, scaling_min_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_min_freq Contents Source Code get_cpu_scaling_min_frequency Source Code elemental impure subroutine get_cpu_scaling_min_frequency ( this , scaling_min_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: scaling_min_freq if ( present ( scaling_min_freq )) scaling_min_freq = this % scaling_min_freq if ( this % debug == 'on' ) print '(a,i0)' , 'scaling min frequency:  ' , this % scaling_min_freq end subroutine get_cpu_scaling_min_frequency","tags":"","loc":"proc/get_cpu_scaling_min_frequency.html"},{"title":"get_cpu_scaling_governor – ForClust","text":"private impure elemental subroutine get_cpu_scaling_governor(this, scaling_governor) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(out), optional :: scaling_governor Contents Source Code get_cpu_scaling_governor Source Code elemental impure subroutine get_cpu_scaling_governor ( this , scaling_governor ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: scaling_governor if ( present ( scaling_governor )) scaling_governor = this % scaling_governor if ( this % debug == 'on' ) print '(a,a)' , 'scaling governor:       ' , this % scaling_governor end subroutine get_cpu_scaling_governor","tags":"","loc":"proc/get_cpu_scaling_governor.html"},{"title":"get_cpu_energy_performance_preference – ForClust","text":"private impure elemental subroutine get_cpu_energy_performance_preference(this, energy_performance_preference) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(out), optional :: energy_performance_preference Contents Source Code get_cpu_energy_performance_preference Source Code elemental impure subroutine get_cpu_energy_performance_preference ( this , energy_performance_preference ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: energy_performance_preference if ( present ( energy_performance_preference )) energy_performance_preference = this % energy_performance_preference if ( this % debug == 'on' ) print '(a,a)' , 'energy perf preference: ' , this % energy_performance_preference end subroutine get_cpu_energy_performance_preference","tags":"","loc":"proc/get_cpu_energy_performance_preference.html"},{"title":"set_cpu_offline – ForClust","text":"private impure elemental subroutine set_cpu_offline(this) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this Contents Source Code set_cpu_offline Source Code elemental impure subroutine set_cpu_offline ( this ) class ( linux_cpu ), intent ( inout ) :: this integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % online = 0 file_name = this % path_cpu // \"/online\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % online close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_offline","tags":"","loc":"proc/set_cpu_offline.html"},{"title":"set_cpu_online – ForClust","text":"private impure elemental subroutine set_cpu_online(this) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this Contents Source Code set_cpu_online Source Code elemental impure subroutine set_cpu_online ( this ) class ( linux_cpu ), intent ( inout ) :: this integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % online = 1 file_name = this % path_cpu // \"/online\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % online close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_online","tags":"","loc":"proc/set_cpu_online.html"},{"title":"set_cpu_scaling_max_freq – ForClust","text":"private impure elemental subroutine set_cpu_scaling_max_freq(this, max_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(in) :: max_freq Contents Source Code set_cpu_scaling_max_freq Source Code elemental impure subroutine set_cpu_scaling_max_freq ( this , max_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( in ) :: max_freq integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % scaling_max_freq = max_freq file_name = this % path_cpu // \"/cpufreq/scaling_max_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % scaling_max_freq close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_scaling_max_freq","tags":"","loc":"proc/set_cpu_scaling_max_freq.html"},{"title":"set_cpu_scaling_min_freq – ForClust","text":"private impure elemental subroutine set_cpu_scaling_min_freq(this, min_freq) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(in) :: min_freq Contents Source Code set_cpu_scaling_min_freq Source Code elemental impure subroutine set_cpu_scaling_min_freq ( this , min_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( in ) :: min_freq integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % scaling_min_freq = min_freq file_name = this % path_cpu // \"/cpufreq/scaling_min_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % scaling_min_freq close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_scaling_min_freq","tags":"","loc":"proc/set_cpu_scaling_min_freq.html"},{"title":"set_cpu_scaling_governor – ForClust","text":"private impure elemental subroutine set_cpu_scaling_governor(this, scaling_governor) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: scaling_governor Contents Source Code set_cpu_scaling_governor Source Code elemental impure subroutine set_cpu_scaling_governor ( this , scaling_governor ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: scaling_governor integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % scaling_governor = scaling_governor file_name = this % path_cpu // \"/cpufreq/scaling_governor\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = this % path_cpu // \"/cpufreq/scaling_governor\" , iostat = stat ) write ( nunit , '(a)' ) this % scaling_governor close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_scaling_governor","tags":"","loc":"proc/set_cpu_scaling_governor.html"},{"title":"set_cpu_energy_performance_preference – ForClust","text":"private impure elemental subroutine set_cpu_energy_performance_preference(this, energy_performance_preference) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: energy_performance_preference Contents Source Code set_cpu_energy_performance_preference Source Code elemental impure subroutine set_cpu_energy_performance_preference ( this , energy_performance_preference ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: energy_performance_preference integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % energy_performance_preference = energy_performance_preference file_name = this % path_cpu // \"/cpufreq/energy_performance_preference\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(a)' ) this % energy_performance_preference close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_energy_performance_preference","tags":"","loc":"proc/set_cpu_energy_performance_preference.html"},{"title":"is_intel_pstate_available – ForClust","text":"private impure elemental subroutine is_intel_pstate_available(this) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this Contents Source Code is_intel_pstate_available Source Code elemental impure subroutine is_intel_pstate_available ( this ) ! bug: it does not depend on a node class ( linux_nodes ), intent ( inout ) :: this integer :: is_intel_pstate logical :: ex inquire ( file = '/sys/devices/system/cpu/intel_pstate' , exist = ex ) if ( ex ) is_intel_pstate = 1 if (. not . ex ) is_intel_pstate = 0 this % is_intel_pstate = is_intel_pstate ! if (this%debug=='on') print'(a,i0)', 'intel pstate avail:     ',this%is_intel_pstate end subroutine is_intel_pstate_available","tags":"","loc":"proc/is_intel_pstate_available.html"},{"title":"get_intel_turbo – ForClust","text":"private impure elemental subroutine get_intel_turbo(this, turbo) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(out), optional :: turbo Contents Source Code get_intel_turbo Source Code elemental impure subroutine get_intel_turbo ( this , turbo ) class ( linux_nodes ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: turbo if ( present ( turbo )) turbo = this % turbo if ( this % debug == 'on' ) print '(a,a)' , 'intel turbo:            ' , this % turbo end subroutine get_intel_turbo","tags":"","loc":"proc/get_intel_turbo.html"},{"title":"set_intel_turbo – ForClust","text":"private impure elemental subroutine set_intel_turbo(this, turbo) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(in) :: turbo Contents Source Code set_intel_turbo Source Code elemental impure subroutine set_intel_turbo ( this , turbo ) ! bug: it does not depend on a node class ( linux_nodes ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: turbo integer :: nunit , stat call this % is_intel_pstate_available () if ( this % is_intel_pstate == 1 ) then this % turbo = turbo open ( newunit = nunit , file = '/sys/devices/system/cpu/intel_pstate/no_turbo' , iostat = stat ) if ( turbo == 'on' ) write ( nunit , '(i0)' ) 0 if ( turbo == 'off' ) write ( nunit , '(i0)' ) 1 close ( nunit ) end if end subroutine set_intel_turbo","tags":"","loc":"proc/set_intel_turbo.html"},{"title":"set_cpu_debug_switch – ForClust","text":"private pure elemental subroutine set_cpu_debug_switch(this, debug) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: debug Contents Source Code set_cpu_debug_switch Source Code elemental pure subroutine set_cpu_debug_switch ( this , debug ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: debug this % debug = debug end subroutine set_cpu_debug_switch","tags":"","loc":"proc/set_cpu_debug_switch.html"},{"title":"set_node_debug_switch – ForClust","text":"private pure elemental subroutine set_node_debug_switch(this, debug) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(in) :: debug Contents Source Code set_node_debug_switch Source Code elemental pure subroutine set_node_debug_switch ( this , debug ) class ( linux_nodes ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: debug this % debug = debug end subroutine set_node_debug_switch","tags":"","loc":"proc/set_node_debug_switch.html"},{"title":"print_all_cluster_info – ForClust","text":"private impure elemental subroutine print_all_cluster_info(this) Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this Contents Source Code print_all_cluster_info Source Code elemental impure subroutine print_all_cluster_info ( this ) class ( cluster ), intent ( inout ) :: this integer :: n , c do n = 1 , this % nnodes ; print '(a,i0)' , 'NODE: ' , n ; print '(a)' , '==============================' call this % node ( n )% select () call this % node ( n )% set_debug ( 'on' ) call this % node ( n )% get_turbo () print '(a)' , '------------------------------' do c = 1 , this % node ( n )% ncpus print '(a,i0)' , 'CPU: ' , c call this % node ( n )% cpu ( c )% set_debug ( 'on' ) call this % node ( n )% cpu ( c )% is_online () call this % node ( n )% cpu ( c )% get_base_freq () call this % node ( n )% cpu ( c )% get_cpuinfo_max_freq () call this % node ( n )% cpu ( c )% get_cpuinfo_min_freq () call this % node ( n )% cpu ( c )% get_scaling_cur_freq () call this % node ( n )% cpu ( c )% get_scaling_max_freq () call this % node ( n )% cpu ( c )% get_scaling_min_freq () call this % node ( n )% cpu ( c )% get_scaling_governor () call this % node ( n )% cpu ( c )% get_energy_performance () print '(a)' , '------------------------------' end do end do end subroutine print_all_cluster_info","tags":"","loc":"proc/print_all_cluster_info.html"},{"title":"select_backlight – ForClust","text":"private impure elemental subroutine select_backlight(this) Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this Contents Source Code select_backlight Source Code elemental impure subroutine select_backlight ( this ) class ( linux_backlight ), intent ( inout ) :: this integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name ! read actual brightness file_name = this % path_backlight // \"/actual_brightness\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % actual_brightness close ( nunit ) else this % actual_brightness = 0 ! error stop \"file not found: \"//file_name endif ! read max brightness file_name = this % path_backlight // \"/max_brightness\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % max_brightness close ( nunit ) else this % max_brightness = 0 ! error stop \"file not found: \"//file_name endif end subroutine select_backlight","tags":"","loc":"proc/select_backlight.html"},{"title":"set_backlight_debug_switch – ForClust","text":"private pure elemental subroutine set_backlight_debug_switch(this, debug) Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this character(len=*), intent(in) :: debug Contents Source Code set_backlight_debug_switch Source Code elemental pure subroutine set_backlight_debug_switch ( this , debug ) class ( linux_backlight ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: debug this % debug = debug end subroutine set_backlight_debug_switch","tags":"","loc":"proc/set_backlight_debug_switch.html"},{"title":"get_backlight_actual_brightness – ForClust","text":"private impure elemental subroutine get_backlight_actual_brightness(this, actual_brightness) Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(out), optional :: actual_brightness Contents Source Code get_backlight_actual_brightness Source Code elemental impure subroutine get_backlight_actual_brightness ( this , actual_brightness ) class ( linux_backlight ), intent ( inout ) :: this integer , intent ( out ), optional :: actual_brightness if ( present ( actual_brightness )) actual_brightness = this % actual_brightness if ( this % debug == 'on' ) print '(a,i0)' , 'actual brightness:         ' , this % actual_brightness end subroutine get_backlight_actual_brightness","tags":"","loc":"proc/get_backlight_actual_brightness.html"},{"title":"get_backlight_max_brightness – ForClust","text":"private impure elemental subroutine get_backlight_max_brightness(this, max_brightness) Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(out), optional :: max_brightness Contents Source Code get_backlight_max_brightness Source Code elemental impure subroutine get_backlight_max_brightness ( this , max_brightness ) class ( linux_backlight ), intent ( inout ) :: this integer , intent ( out ), optional :: max_brightness if ( present ( max_brightness )) max_brightness = this % max_brightness if ( this % debug == 'on' ) print '(a,i0)' , 'max brightness:         ' , this % max_brightness end subroutine get_backlight_max_brightness","tags":"","loc":"proc/get_backlight_max_brightness.html"},{"title":"set_backlight_brightness – ForClust","text":"private impure elemental subroutine set_backlight_brightness(this, brightness) Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(in) :: brightness Contents Source Code set_backlight_brightness Source Code elemental impure subroutine set_backlight_brightness ( this , brightness ) class ( linux_backlight ), intent ( inout ) :: this integer , intent ( in ) :: brightness integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % brightness = brightness file_name = this % path_backlight // \"/brightness\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % brightness close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_backlight_brightness","tags":"","loc":"proc/set_backlight_brightness.html"},{"title":"deallocate_linux_backlight – ForClust","text":"private pure elemental subroutine deallocate_linux_backlight(this) Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this Contents Source Code deallocate_linux_backlight Source Code elemental pure subroutine deallocate_linux_backlight ( this ) class ( linux_backlight ), intent ( inout ) :: this if ( allocated ( this % debug )) deallocate ( this % debug ) if ( allocated ( this % path_backlight )) deallocate ( this % path_backlight ) end subroutine deallocate_linux_backlight","tags":"","loc":"proc/deallocate_linux_backlight.html"},{"title":"deallocate_linux_cpu – ForClust","text":"private pure elemental subroutine deallocate_linux_cpu(this) Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this Contents Source Code deallocate_linux_cpu Source Code elemental pure subroutine deallocate_linux_cpu ( this ) class ( linux_cpu ), intent ( inout ) :: this if ( allocated ( this % debug )) deallocate ( this % debug ) if ( allocated ( this % path_cpu )) deallocate ( this % path_cpu ) if ( allocated ( this % scaling_governor )) deallocate ( this % scaling_governor ) if ( allocated ( this % energy_performance_preference )) deallocate ( this % energy_performance_preference ) end subroutine deallocate_linux_cpu","tags":"","loc":"proc/deallocate_linux_cpu.html"},{"title":"deallocate_linux_nodes – ForClust","text":"private pure elemental subroutine deallocate_linux_nodes(this) Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this Contents Source Code deallocate_linux_nodes Source Code elemental pure subroutine deallocate_linux_nodes ( this ) class ( linux_nodes ), intent ( inout ) :: this if ( allocated ( this % debug )) deallocate ( this % debug ) if ( allocated ( this % path_node )) deallocate ( this % path_node ) if ( allocated ( this % turbo )) deallocate ( this % turbo ) if ( allocated ( this % cpu )) call this % cpu (:)% deselect () end subroutine deallocate_linux_nodes","tags":"","loc":"proc/deallocate_linux_nodes.html"},{"title":"deallocate_cluster – ForClust","text":"private pure elemental subroutine deallocate_cluster(this) Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this Contents Source Code deallocate_cluster Source Code elemental pure subroutine deallocate_cluster ( this ) class ( cluster ), intent ( inout ) :: this if ( allocated ( this % node )) call this % node (:)% deselect () call this % backlight % deselect () end subroutine deallocate_cluster","tags":"","loc":"proc/deallocate_cluster.html"},{"title":"forclust – ForClust","text":"Contents Derived Types linux_backlight linux_cpu linux_nodes cluster Subroutines find_number_of_nodes select_linux find_number_of_cpus select_node is_cpu_online get_cpu_base_frequency get_cpuinfo_max_frequency get_cpuinfo_min_frequency get_cpu_scaling_cur_frequency get_cpu_scaling_max_frequency get_cpu_scaling_min_frequency get_cpu_scaling_governor get_cpu_energy_performance_preference set_cpu_offline set_cpu_online set_cpu_scaling_max_freq set_cpu_scaling_min_freq set_cpu_scaling_governor set_cpu_energy_performance_preference is_intel_pstate_available get_intel_turbo set_intel_turbo set_cpu_debug_switch set_node_debug_switch print_all_cluster_info select_backlight set_backlight_debug_switch get_backlight_actual_brightness get_backlight_max_brightness set_backlight_brightness deallocate_linux_backlight deallocate_linux_cpu deallocate_linux_nodes deallocate_cluster Derived Types type, private :: linux_backlight Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: debug character(len=:), public, allocatable :: path_backlight integer, public :: actual_brightness integer, public :: brightness integer, public :: max_brightness Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_debug => set_backlight_debug_switch Subroutine procedure\n                    ,                  public\n                  :: select => select_backlight Subroutine procedure\n                    ,                  public\n                  :: get_actual_brightness => get_backlight_actual_brightness Subroutine procedure\n                    ,                  public\n                  :: get_max_brightness => get_backlight_max_brightness Subroutine procedure\n                    ,                  public\n                  :: set_brightness => set_backlight_brightness Subroutine procedure\n                    ,                  public\n                  :: deselect => deallocate_linux_backlight Subroutine type, private :: linux_cpu Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: debug character(len=:), public, allocatable :: path_cpu integer, public :: online integer, public :: base_frequency integer, public :: cpuinfo_max_freq integer, public :: cpuinfo_min_freq integer, public :: scaling_cur_freq integer, public :: scaling_max_freq integer, public :: scaling_min_freq character(len=:), public, allocatable :: scaling_governor character(len=:), public, allocatable :: energy_performance_preference Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_debug => set_cpu_debug_switch Subroutine procedure\n                    ,                  public\n                  :: is_online => is_cpu_online Subroutine procedure\n                    ,                  public\n                  :: get_base_freq => get_cpu_base_frequency Subroutine procedure\n                    ,                  public\n                  :: get_cpuinfo_max_freq => get_cpuinfo_max_frequency Subroutine procedure\n                    ,                  public\n                  :: get_cpuinfo_min_freq => get_cpuinfo_min_frequency Subroutine procedure\n                    ,                  public\n                  :: get_scaling_cur_freq => get_cpu_scaling_cur_frequency Subroutine procedure\n                    ,                  public\n                  :: get_scaling_max_freq => get_cpu_scaling_max_frequency Subroutine procedure\n                    ,                  public\n                  :: get_scaling_min_freq => get_cpu_scaling_min_frequency Subroutine procedure\n                    ,                  public\n                  :: get_scaling_governor => get_cpu_scaling_governor Subroutine procedure\n                    ,                  public\n                  :: get_energy_performance => get_cpu_energy_performance_preference Subroutine procedure\n                    ,                  public\n                  :: set_offline => set_cpu_offline Subroutine procedure\n                    ,                  public\n                  :: set_online => set_cpu_online Subroutine procedure\n                    ,                  public\n                  :: set_scaling_max_freq => set_cpu_scaling_max_freq Subroutine procedure\n                    ,                  public\n                  :: set_scaling_min_freq => set_cpu_scaling_min_freq Subroutine procedure\n                    ,                  public\n                  :: set_scaling_governor => set_cpu_scaling_governor Subroutine procedure\n                    ,                  public\n                  :: set_energy_performance => set_cpu_energy_performance_preference Subroutine procedure\n                    ,                  public\n                  :: deselect => deallocate_linux_cpu Subroutine type, private :: linux_nodes Components Type Visibility Attributes Name Initial character(len=:), public, allocatable :: debug character(len=:), public, allocatable :: path_node type( linux_cpu ), public, dimension(:), allocatable :: cpu integer, public :: ncpus character(len=:), public, allocatable :: turbo integer, public :: is_intel_pstate Type-Bound Procedures procedure\n                    ,                  public\n                  :: set_debug => set_node_debug_switch Subroutine procedure\n                    ,                  public\n                  :: select => select_node Subroutine procedure\n                    ,                  private\n                  :: find_number_of_cpus Subroutine procedure\n                    ,                  private\n                  :: is_intel_pstate_available Subroutine procedure\n                    ,                  public\n                  :: get_turbo => get_intel_turbo Subroutine procedure\n                    ,                  public\n                  :: set_turbo => set_intel_turbo Subroutine procedure\n                    ,                  public\n                  :: deselect => deallocate_linux_nodes Subroutine type, public :: cluster Components Type Visibility Attributes Name Initial type( linux_nodes ), public, dimension(:), allocatable :: node integer, public :: nnodes type( linux_backlight ), public :: backlight Type-Bound Procedures procedure\n                    ,                  public\n                  :: select => select_linux Subroutine procedure\n                    ,                  private\n                  :: find_number_of_nodes Subroutine procedure\n                    ,                  public\n                  :: print_info => print_all_cluster_info Subroutine procedure\n                    ,                  public\n                  :: deselect => deallocate_cluster Subroutine Subroutines private pure elemental subroutine find_number_of_nodes (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this private pure elemental subroutine select_linux (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this private impure elemental subroutine find_number_of_cpus (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this private impure elemental subroutine select_node (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this private impure elemental subroutine is_cpu_online (this, online) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: online private impure elemental subroutine get_cpu_base_frequency (this, base_frequency) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: base_frequency private impure elemental subroutine get_cpuinfo_max_frequency (this, cpuinfo_max_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: cpuinfo_max_freq private impure elemental subroutine get_cpuinfo_min_frequency (this, cpuinfo_min_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: cpuinfo_min_freq private impure elemental subroutine get_cpu_scaling_cur_frequency (this, scaling_cur_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_cur_freq private impure elemental subroutine get_cpu_scaling_max_frequency (this, scaling_max_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_max_freq private impure elemental subroutine get_cpu_scaling_min_frequency (this, scaling_min_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(out), optional :: scaling_min_freq private impure elemental subroutine get_cpu_scaling_governor (this, scaling_governor) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(out), optional :: scaling_governor private impure elemental subroutine get_cpu_energy_performance_preference (this, energy_performance_preference) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(out), optional :: energy_performance_preference private impure elemental subroutine set_cpu_offline (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this private impure elemental subroutine set_cpu_online (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this private impure elemental subroutine set_cpu_scaling_max_freq (this, max_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(in) :: max_freq private impure elemental subroutine set_cpu_scaling_min_freq (this, min_freq) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this integer, intent(in) :: min_freq private impure elemental subroutine set_cpu_scaling_governor (this, scaling_governor) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: scaling_governor private impure elemental subroutine set_cpu_energy_performance_preference (this, energy_performance_preference) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: energy_performance_preference private impure elemental subroutine is_intel_pstate_available (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this private impure elemental subroutine get_intel_turbo (this, turbo) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(out), optional :: turbo private impure elemental subroutine set_intel_turbo (this, turbo) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(in) :: turbo private pure elemental subroutine set_cpu_debug_switch (this, debug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this character(len=*), intent(in) :: debug private pure elemental subroutine set_node_debug_switch (this, debug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this character(len=*), intent(in) :: debug private impure elemental subroutine print_all_cluster_info (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this private impure elemental subroutine select_backlight (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this private pure elemental subroutine set_backlight_debug_switch (this, debug) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this character(len=*), intent(in) :: debug private impure elemental subroutine get_backlight_actual_brightness (this, actual_brightness) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(out), optional :: actual_brightness private impure elemental subroutine get_backlight_max_brightness (this, max_brightness) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(out), optional :: max_brightness private impure elemental subroutine set_backlight_brightness (this, brightness) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this integer, intent(in) :: brightness private pure elemental subroutine deallocate_linux_backlight (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_backlight ), intent(inout) :: this private pure elemental subroutine deallocate_linux_cpu (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_cpu ), intent(inout) :: this private pure elemental subroutine deallocate_linux_nodes (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( linux_nodes ), intent(inout) :: this private pure elemental subroutine deallocate_cluster (this) Author Seyed Ali Ghasemi Arguments Type Intent Optional Attributes Name class( cluster ), intent(inout) :: this","tags":"","loc":"module/forclust.html"},{"title":"forclust.f90 – ForClust","text":"Contents Modules forclust Source Code forclust.f90 Source Code !> author: Seyed Ali Ghasemi module forclust implicit none private public :: cluster !=============================================================================== type :: linux_backlight character ( len = :), allocatable :: debug character ( len = :), allocatable :: path_backlight integer :: actual_brightness integer :: brightness integer :: max_brightness contains procedure :: set_debug => set_backlight_debug_switch procedure :: select => select_backlight procedure :: get_actual_brightness => get_backlight_actual_brightness procedure :: get_max_brightness => get_backlight_max_brightness procedure :: set_brightness => set_backlight_brightness procedure :: deselect => deallocate_linux_backlight end type linux_backlight !=============================================================================== !=============================================================================== type :: linux_cpu character ( len = :), allocatable :: debug character ( len = :), allocatable :: path_cpu integer :: online integer :: base_frequency integer :: cpuinfo_max_freq integer :: cpuinfo_min_freq integer :: scaling_cur_freq integer :: scaling_max_freq integer :: scaling_min_freq character ( len = :), allocatable :: scaling_governor character ( len = :), allocatable :: energy_performance_preference contains procedure :: set_debug => set_cpu_debug_switch procedure :: is_online => is_cpu_online procedure :: get_base_freq => get_cpu_base_frequency procedure :: get_cpuinfo_max_freq => get_cpuinfo_max_frequency procedure :: get_cpuinfo_min_freq => get_cpuinfo_min_frequency procedure :: get_scaling_cur_freq => get_cpu_scaling_cur_frequency procedure :: get_scaling_max_freq => get_cpu_scaling_max_frequency procedure :: get_scaling_min_freq => get_cpu_scaling_min_frequency procedure :: get_scaling_governor => get_cpu_scaling_governor procedure :: get_energy_performance => get_cpu_energy_performance_preference procedure :: set_offline => set_cpu_offline procedure :: set_online => set_cpu_online procedure :: set_scaling_max_freq => set_cpu_scaling_max_freq procedure :: set_scaling_min_freq => set_cpu_scaling_min_freq procedure :: set_scaling_governor => set_cpu_scaling_governor procedure :: set_energy_performance => set_cpu_energy_performance_preference procedure :: deselect => deallocate_linux_cpu end type linux_cpu !=============================================================================== !=============================================================================== type :: linux_nodes character ( len = :), allocatable :: debug character ( len = :), allocatable :: path_node type ( linux_cpu ), dimension (:), allocatable :: cpu integer :: ncpus character ( len = :), allocatable :: turbo integer :: is_intel_pstate contains procedure :: set_debug => set_node_debug_switch procedure :: select => select_node procedure , private :: find_number_of_cpus ! todo: procedure , private :: is_intel_pstate_available procedure :: get_turbo => get_intel_turbo procedure :: set_turbo => set_intel_turbo procedure :: deselect => deallocate_linux_nodes end type linux_nodes !=============================================================================== !=============================================================================== type :: cluster type ( linux_nodes ), dimension (:), allocatable :: node integer :: nnodes type ( linux_backlight ) :: backlight contains procedure :: select => select_linux procedure , private :: find_number_of_nodes ! todo: procedure :: print_info => print_all_cluster_info procedure :: deselect => deallocate_cluster end type cluster !=============================================================================== contains !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine find_number_of_nodes ( this ) class ( cluster ), intent ( inout ) :: this ! todo: get total number of linux nodes this % nnodes = 1 end subroutine find_number_of_nodes !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine select_linux ( this ) class ( cluster ), intent ( inout ) :: this character ( len = 100 ) :: current_node_path character ( len = 100 ) :: backlight_path integer :: i call this % find_number_of_nodes () if (. not . allocated ( this % node )) allocate ( this % node ( this % nnodes )) do concurrent ( i = 1 : this % nnodes ) write ( current_node_path , \"(a,i0,a)\" ) \"/sys/devices/system/node/node\" , i - 1 , \"/\" this % node ( i )% path_node = adjustl ( trim ( current_node_path )) end do write ( backlight_path , \"(a,i0,a)\" ) \"/sys/class/backlight/intel_backlight\" this % backlight % path_backlight = adjustl ( trim ( backlight_path )) end subroutine select_linux !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine find_number_of_cpus ( this ) class ( linux_nodes ), intent ( inout ) :: this integer :: nunit logical :: ex character ( len = :), allocatable :: file_name ! todo: get total number of linux cpus call execute_command_line ( \"echo $(nproc --all) > /tmp/forclust_ncpus\" ) file_name = '/tmp/forclust_ncpus' inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , action = 'read' ) read ( nunit , * ) this % ncpus close ( nunit ) else this % ncpus = 1 ! error stop \"file not found: \"//file_name end if end subroutine find_number_of_cpus !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine select_node ( this ) class ( linux_nodes ), intent ( inout ) :: this character ( len = 100 ) :: current_cpu_path integer :: nunit , stat , i integer :: temp character ( len = 100 ) :: temp_char logical :: ex character ( len = :), allocatable :: file_name ! check if intel_pstate exists call this % is_intel_pstate_available () if ( this % is_intel_pstate == 1 ) then ! read turbo open ( newunit = nunit , file = '/sys/devices/system/cpu/intel_pstate/no_turbo' , iostat = stat ) read ( nunit , * ) temp close ( nunit ) if ( temp == 1 ) this % turbo = 'off' if ( temp == 0 ) this % turbo = 'on' else this % turbo = 'off' end if call this % find_number_of_cpus () if (. not . allocated ( this % cpu )) allocate ( this % cpu ( this % ncpus )) do concurrent ( i = 1 : this % ncpus ) ! path cpu write ( current_cpu_path , \"(a,a,i0)\" ) adjustl ( trim ( this % path_node )), \"cpu\" , i - 1 this % cpu ( i )% path_cpu = adjustl ( trim ( current_cpu_path )) ! read base frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/base_frequency\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% base_frequency close ( nunit ) else this % cpu ( i )% base_frequency = 0 ! error stop \"file not found: \"//file_name endif ! read cpuinfo max frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/cpuinfo_max_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% cpuinfo_max_freq close ( nunit ) else this % cpu ( i )% cpuinfo_max_freq = 0 ! error stop \"file not found: \"//file_name endif ! read cpuinfo min frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/cpuinfo_min_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% cpuinfo_min_freq close ( nunit ) else this % cpu ( i )% cpuinfo_min_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling cur frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_cur_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% scaling_cur_freq close ( nunit ) else this % cpu ( i )% scaling_cur_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling max frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_max_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_max_freq\" , iostat = stat ) read ( nunit , * ) this % cpu ( i )% scaling_max_freq close ( nunit ) else this % cpu ( i )% scaling_max_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling min frequency file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_min_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % cpu ( i )% scaling_min_freq close ( nunit ) else this % cpu ( i )% scaling_min_freq = 0 ! error stop \"file not found: \"//file_name endif ! read scaling governor file_name = this % cpu ( i )% path_cpu // \"/cpufreq/scaling_governor\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) temp_char this % cpu ( i )% scaling_governor = adjustl ( trim ( temp_char )) close ( nunit ) else this % cpu ( i )% scaling_governor = \"not found\" ! error stop \"file not found: \"//file_name endif ! read energy performance preference file_name = this % cpu ( i )% path_cpu // \"/cpufreq/energy_performance_preference\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) temp_char this % cpu ( i )% energy_performance_preference = adjustl ( trim ( temp_char )) close ( nunit ) else this % cpu ( i )% energy_performance_preference = \"not found\" ! error stop \"file not found: \"//file_name endif end do ! read online this % cpu ( 1 )% online = 1 do concurrent ( i = 2 : this % ncpus ) file_name = this % cpu ( i )% path_cpu // \"/online\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = this % cpu ( i )% path_cpu // \"/online\" , iostat = stat ) read ( nunit , * ) this % cpu ( i )% online close ( nunit ) else this % cpu ( i )% online = 0 ! error stop \"file not found: \"//file_name endif end do end subroutine select_node !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine is_cpu_online ( this , online ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: online if ( present ( online )) online = this % online if ( this % debug == 'on' ) print '(a,i0)' , 'online:                 ' , this % online end subroutine is_cpu_online !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpu_base_frequency ( this , base_frequency ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: base_frequency if ( present ( base_frequency )) base_frequency = this % base_frequency if ( this % debug == 'on' ) print '(a,i0)' , 'base frequency:         ' , this % base_frequency end subroutine get_cpu_base_frequency !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpuinfo_max_frequency ( this , cpuinfo_max_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: cpuinfo_max_freq if ( present ( cpuinfo_max_freq )) cpuinfo_max_freq = this % cpuinfo_max_freq if ( this % debug == 'on' ) print '(a,i0)' , 'cpuinfo max frequency:  ' , this % cpuinfo_max_freq end subroutine get_cpuinfo_max_frequency !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpuinfo_min_frequency ( this , cpuinfo_min_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: cpuinfo_min_freq if ( present ( cpuinfo_min_freq )) cpuinfo_min_freq = this % cpuinfo_min_freq if ( this % debug == 'on' ) print '(a,i0)' , 'cpuinfo min frequency:  ' , this % cpuinfo_min_freq end subroutine get_cpuinfo_min_frequency !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpu_scaling_cur_frequency ( this , scaling_cur_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: scaling_cur_freq if ( present ( scaling_cur_freq )) scaling_cur_freq = this % scaling_cur_freq if ( this % debug == 'on' ) print '(a,i0)' , 'scaling cur frequency:  ' , this % scaling_cur_freq end subroutine get_cpu_scaling_cur_frequency !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpu_scaling_max_frequency ( this , scaling_max_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: scaling_max_freq if ( present ( scaling_max_freq )) scaling_max_freq = this % scaling_max_freq if ( this % debug == 'on' ) print '(a,i0)' , 'scaling max frequency:  ' , this % scaling_max_freq end subroutine get_cpu_scaling_max_frequency !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpu_scaling_min_frequency ( this , scaling_min_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( out ), optional :: scaling_min_freq if ( present ( scaling_min_freq )) scaling_min_freq = this % scaling_min_freq if ( this % debug == 'on' ) print '(a,i0)' , 'scaling min frequency:  ' , this % scaling_min_freq end subroutine get_cpu_scaling_min_frequency !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpu_scaling_governor ( this , scaling_governor ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: scaling_governor if ( present ( scaling_governor )) scaling_governor = this % scaling_governor if ( this % debug == 'on' ) print '(a,a)' , 'scaling governor:       ' , this % scaling_governor end subroutine get_cpu_scaling_governor !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_cpu_energy_performance_preference ( this , energy_performance_preference ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: energy_performance_preference if ( present ( energy_performance_preference )) energy_performance_preference = this % energy_performance_preference if ( this % debug == 'on' ) print '(a,a)' , 'energy perf preference: ' , this % energy_performance_preference end subroutine get_cpu_energy_performance_preference !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_cpu_offline ( this ) class ( linux_cpu ), intent ( inout ) :: this integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % online = 0 file_name = this % path_cpu // \"/online\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % online close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_offline !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_cpu_online ( this ) class ( linux_cpu ), intent ( inout ) :: this integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % online = 1 file_name = this % path_cpu // \"/online\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % online close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_online !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_cpu_scaling_max_freq ( this , max_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( in ) :: max_freq integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % scaling_max_freq = max_freq file_name = this % path_cpu // \"/cpufreq/scaling_max_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % scaling_max_freq close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_scaling_max_freq !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_cpu_scaling_min_freq ( this , min_freq ) class ( linux_cpu ), intent ( inout ) :: this integer , intent ( in ) :: min_freq integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % scaling_min_freq = min_freq file_name = this % path_cpu // \"/cpufreq/scaling_min_freq\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % scaling_min_freq close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_scaling_min_freq !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_cpu_scaling_governor ( this , scaling_governor ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: scaling_governor integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % scaling_governor = scaling_governor file_name = this % path_cpu // \"/cpufreq/scaling_governor\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = this % path_cpu // \"/cpufreq/scaling_governor\" , iostat = stat ) write ( nunit , '(a)' ) this % scaling_governor close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_scaling_governor !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_cpu_energy_performance_preference ( this , energy_performance_preference ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: energy_performance_preference integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % energy_performance_preference = energy_performance_preference file_name = this % path_cpu // \"/cpufreq/energy_performance_preference\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(a)' ) this % energy_performance_preference close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_cpu_energy_performance_preference !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine is_intel_pstate_available ( this ) ! bug: it does not depend on a node class ( linux_nodes ), intent ( inout ) :: this integer :: is_intel_pstate logical :: ex inquire ( file = '/sys/devices/system/cpu/intel_pstate' , exist = ex ) if ( ex ) is_intel_pstate = 1 if (. not . ex ) is_intel_pstate = 0 this % is_intel_pstate = is_intel_pstate ! if (this%debug=='on') print'(a,i0)', 'intel pstate avail:     ',this%is_intel_pstate end subroutine is_intel_pstate_available !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_intel_turbo ( this , turbo ) class ( linux_nodes ), intent ( inout ) :: this character ( len =* ), intent ( out ), optional :: turbo if ( present ( turbo )) turbo = this % turbo if ( this % debug == 'on' ) print '(a,a)' , 'intel turbo:            ' , this % turbo end subroutine get_intel_turbo !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_intel_turbo ( this , turbo ) ! bug: it does not depend on a node class ( linux_nodes ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: turbo integer :: nunit , stat call this % is_intel_pstate_available () if ( this % is_intel_pstate == 1 ) then this % turbo = turbo open ( newunit = nunit , file = '/sys/devices/system/cpu/intel_pstate/no_turbo' , iostat = stat ) if ( turbo == 'on' ) write ( nunit , '(i0)' ) 0 if ( turbo == 'off' ) write ( nunit , '(i0)' ) 1 close ( nunit ) end if end subroutine set_intel_turbo !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_cpu_debug_switch ( this , debug ) class ( linux_cpu ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: debug this % debug = debug end subroutine set_cpu_debug_switch !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_node_debug_switch ( this , debug ) class ( linux_nodes ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: debug this % debug = debug end subroutine set_node_debug_switch !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine print_all_cluster_info ( this ) class ( cluster ), intent ( inout ) :: this integer :: n , c do n = 1 , this % nnodes ; print '(a,i0)' , 'NODE: ' , n ; print '(a)' , '==============================' call this % node ( n )% select () call this % node ( n )% set_debug ( 'on' ) call this % node ( n )% get_turbo () print '(a)' , '------------------------------' do c = 1 , this % node ( n )% ncpus print '(a,i0)' , 'CPU: ' , c call this % node ( n )% cpu ( c )% set_debug ( 'on' ) call this % node ( n )% cpu ( c )% is_online () call this % node ( n )% cpu ( c )% get_base_freq () call this % node ( n )% cpu ( c )% get_cpuinfo_max_freq () call this % node ( n )% cpu ( c )% get_cpuinfo_min_freq () call this % node ( n )% cpu ( c )% get_scaling_cur_freq () call this % node ( n )% cpu ( c )% get_scaling_max_freq () call this % node ( n )% cpu ( c )% get_scaling_min_freq () call this % node ( n )% cpu ( c )% get_scaling_governor () call this % node ( n )% cpu ( c )% get_energy_performance () print '(a)' , '------------------------------' end do end do end subroutine print_all_cluster_info !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine select_backlight ( this ) class ( linux_backlight ), intent ( inout ) :: this integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name ! read actual brightness file_name = this % path_backlight // \"/actual_brightness\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % actual_brightness close ( nunit ) else this % actual_brightness = 0 ! error stop \"file not found: \"//file_name endif ! read max brightness file_name = this % path_backlight // \"/max_brightness\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) read ( nunit , * ) this % max_brightness close ( nunit ) else this % max_brightness = 0 ! error stop \"file not found: \"//file_name endif end subroutine select_backlight !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine set_backlight_debug_switch ( this , debug ) class ( linux_backlight ), intent ( inout ) :: this character ( len =* ), intent ( in ) :: debug this % debug = debug end subroutine set_backlight_debug_switch !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_backlight_actual_brightness ( this , actual_brightness ) class ( linux_backlight ), intent ( inout ) :: this integer , intent ( out ), optional :: actual_brightness if ( present ( actual_brightness )) actual_brightness = this % actual_brightness if ( this % debug == 'on' ) print '(a,i0)' , 'actual brightness:         ' , this % actual_brightness end subroutine get_backlight_actual_brightness !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine get_backlight_max_brightness ( this , max_brightness ) class ( linux_backlight ), intent ( inout ) :: this integer , intent ( out ), optional :: max_brightness if ( present ( max_brightness )) max_brightness = this % max_brightness if ( this % debug == 'on' ) print '(a,i0)' , 'max brightness:         ' , this % max_brightness end subroutine get_backlight_max_brightness !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental impure subroutine set_backlight_brightness ( this , brightness ) class ( linux_backlight ), intent ( inout ) :: this integer , intent ( in ) :: brightness integer :: nunit , stat logical :: ex character ( len = :), allocatable :: file_name this % brightness = brightness file_name = this % path_backlight // \"/brightness\" inquire ( file = file_name , exist = ex ) if ( ex ) then open ( newunit = nunit , file = file_name , iostat = stat ) write ( nunit , '(i0)' ) this % brightness close ( nunit ) else ! error stop \"file not found: \"//file_name endif end subroutine set_backlight_brightness !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_linux_backlight ( this ) class ( linux_backlight ), intent ( inout ) :: this if ( allocated ( this % debug )) deallocate ( this % debug ) if ( allocated ( this % path_backlight )) deallocate ( this % path_backlight ) end subroutine deallocate_linux_backlight !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_linux_cpu ( this ) class ( linux_cpu ), intent ( inout ) :: this if ( allocated ( this % debug )) deallocate ( this % debug ) if ( allocated ( this % path_cpu )) deallocate ( this % path_cpu ) if ( allocated ( this % scaling_governor )) deallocate ( this % scaling_governor ) if ( allocated ( this % energy_performance_preference )) deallocate ( this % energy_performance_preference ) end subroutine deallocate_linux_cpu !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_linux_nodes ( this ) class ( linux_nodes ), intent ( inout ) :: this if ( allocated ( this % debug )) deallocate ( this % debug ) if ( allocated ( this % path_node )) deallocate ( this % path_node ) if ( allocated ( this % turbo )) deallocate ( this % turbo ) if ( allocated ( this % cpu )) call this % cpu (:)% deselect () end subroutine deallocate_linux_nodes !=============================================================================== !=============================================================================== !> author: Seyed Ali Ghasemi elemental pure subroutine deallocate_cluster ( this ) class ( cluster ), intent ( inout ) :: this if ( allocated ( this % node )) call this % node (:)% deselect () call this % backlight % deselect () end subroutine deallocate_cluster !=============================================================================== end module forclust","tags":"","loc":"sourcefile/forclust.f90.html"}]}